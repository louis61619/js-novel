"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[419],{705:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-73435500",path:"/front-end/javascript/3_arguments.html",title:"arguments 和 array-like",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"將 arguments 轉化為 Array",slug:"將-arguments-轉化為-array",children:[{level:3,title:"進行 for 循環轉成陣列",slug:"進行-for-循環轉成陣列",children:[]},{level:3,title:"使用 Array 的原型方法 slice",slug:"使用-array-的原型方法-slice",children:[]},{level:3,title:"透過 ES6 的語法 Array.from、展開運算符、for...of 等",slug:"透過-es6-的語法-array-from、展開運算符、for-of-等",children:[]}]},{level:2,title:"ES6 與 arguments",slug:"es6-與-arguments",children:[{level:3,title:"在 ES6 中的箭頭函數中不存在 arguments",slug:"在-es6-中的箭頭函數中不存在-arguments",children:[]},{level:3,title:"可以使用其餘參數(rest parameter)獲取動態的參數",slug:"可以使用其餘參數-rest-parameter-獲取動態的參數",children:[]}]}],filePathRelative:"front-end/javascript/3_arguments.md",git:{updatedTime:1665400196e3,contributors:[{name:"louis61619",email:"louis61619@gmail.com",commits:1}]}}},2427:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const e=(0,a(6252).uE)('<h1 id="arguments-和-array-like" tabindex="-1"><a class="header-anchor" href="#arguments-和-array-like" aria-hidden="true">#</a> arguments 和 array-like</h1><p>arguments 是函數中的一個由所有參數所合成的類陣列(array-like)物件。</p><blockquote><p>Array-like 簡單介紹：</p><ul><li><p>Array-like 並非一種陣列類型，而是一個物件。</p></li><li><p>Array-like 物件可以調用 length 獲取其長度，也可以透過索引(index)進行訪問，並且也能使迭代器(iterator)進行循環。</p></li><li><p>Array-like 不是陣列類型，所以不能使用陣列的方法，比如 forEach、map 等。</p></li></ul></blockquote><p>可以在函數中直接進行打印：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>輸出為：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Arguments(5) [10, 20, 30, 40, 50, callee: ƒ, Symbol(Symbol.iterator): ƒ]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="將-arguments-轉化為-array" tabindex="-1"><a class="header-anchor" href="#將-arguments-轉化為-array" aria-hidden="true">#</a> 將 arguments 轉化為 Array</h2><p>前面提到過 arguments 並非一般的 Array 類型，而是一種類陣列(array-like)物件，所以有時候會將其轉成 Array 會更好操作。</p><h3 id="進行-for-循環轉成陣列" tabindex="-1"><a class="header-anchor" href="#進行-for-循環轉成陣列" aria-hidden="true">#</a> 進行 for 循環轉成陣列</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="使用-array-的原型方法-slice" tabindex="-1"><a class="header-anchor" href="#使用-array-的原型方法-slice" aria-hidden="true">#</a> 使用 Array 的原型方法 slice</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>slice 的原理是將 this 作為指定的陣列進行 for 循環返回一個新的陣列，所以和前一種方法的實現原理是差不多的。</p><p>所以也可以直接這樣用：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="透過-es6-的語法-array-from、展開運算符、for-of-等" tabindex="-1"><a class="header-anchor" href="#透過-es6-的語法-array-from、展開運算符、for-of-等" aria-hidden="true">#</a> 透過 ES6 的語法 Array.from、展開運算符、for...of 等</h3><p>Array.from</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> newArr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>For...of</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> item <span class="token keyword">of</span> arguments<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>展開運算符</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arguments<span class="token punctuation">]</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArr<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="es6-與-arguments" tabindex="-1"><a class="header-anchor" href="#es6-與-arguments" aria-hidden="true">#</a> ES6 與 arguments</h2><h3 id="在-es6-中的箭頭函數中不存在-arguments" tabindex="-1"><a class="header-anchor" href="#在-es6-中的箭頭函數中不存在-arguments" aria-hidden="true">#</a> 在 ES6 中的箭頭函數中不存在 arguments</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果在瀏覽器中打印會得到一個錯誤：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Uncaught ReferenceError: arguments is not defined\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>不過如果在 Nodejs 中打印出的結果會有所不同，由於 Nodejs 會將各個文件當作模塊，並放到一個函數中，所以箭頭函數中的 arguments 會向上找到這個函數中的 arguments，類似於以下的例子：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 模擬noejs的機制</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>在瀏覽器中執行，會打印出：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>Arguments [123, callee: ƒ, Symbol(Symbol.iterator): ƒ]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="可以使用其餘參數-rest-parameter-獲取動態的參數" tabindex="-1"><a class="header-anchor" href="#可以使用其餘參數-rest-parameter-獲取動態的參數" aria-hidden="true">#</a> 可以使用其餘參數(rest parameter)獲取動態的參數</h3><p>由於 es6 的箭頭函數中無法獲取 arguments 物件，所以現在通常不會推薦使用 arguments，而會使用新的 es6 語法——其餘參數(rest parameter)，<strong>其餘參數（rest parameter)</strong> 語法可以讓我們表示不確定數量的參數，並將其視為一個陣列：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> <span class="token operator">...</span>nums</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>輸出為：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[30, 40, 50]\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',37),p={},t=(0,a(3744).Z)(p,[["render",function(n,s){return e}]])}}]);