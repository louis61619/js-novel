"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[229],{9437:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-142fa0e4",path:"/front-end/javascript/11_var&let&const.html",title:"var、let、const",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"基本使用",slug:"基本使用",children:[]},{level:2,title:"作用域提升",slug:"作用域提升",children:[]},{level:2,title:"let、const 和 window",slug:"let、const-和-window",children:[]},{level:2,title:"塊極作用域",slug:"塊極作用域",children:[{level:3,title:"塊極作用域的用處",slug:"塊極作用域的用處",children:[]},{level:3,title:"暫時性死區",slug:"暫時性死區",children:[]}]},{level:2,title:"var、const、let 的選擇",slug:"var、const、let-的選擇",children:[]}],filePathRelative:"front-end/javascript/11_var&let&const.md",git:{updatedTime:1665400196e3,contributors:[{name:"louis61619",email:"louis61619@gmail.com",commits:1}]}}},8171:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="var、let、const" tabindex="-1"><a class="header-anchor" href="#var、let、const" aria-hidden="true">#</a> var、let、const</h1><p>在 ES5 中聲明變數都是使用 var 關鍵字，從 ES6 開始新增了兩個關鍵字可以聲明變數：let、const。</p><h2 id="基本使用" tabindex="-1"><a class="header-anchor" href="#基本使用" aria-hidden="true">#</a> 基本使用</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> bar <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>const 意思即為常量（ constant ），代表不可被修改。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>但如果是賦值為某個引用類型，則可以修改其內部的屬性或元素，例如：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  foo<span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span>\n<span class="token punctuation">}</span>\nobj<span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>相對於 var ， let 和 const 所定義過的變數名稱都不可以重複聲明。</p><h2 id="作用域提升" tabindex="-1"><a class="header-anchor" href="#作用域提升" aria-hidden="true">#</a> 作用域提升</h2><p>var 有作用域提升，那 let 有作用域提升嗎？運行以下程式碼：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>\n<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>可以獲得錯誤 Cannot access &#39;foo&#39; before initialization ，意思是 foo 在初始化前無法被訪問，所以實際上這些變數會提前被創建，但是不可以被訪問，直到這些變數被賦值。</p><p>由於作用域提升沒有準確的定義，所以從不可被訪問的角度來說，可以說 let 和 const 是沒有作用域提升的。</p><h2 id="let、const-和-window" tabindex="-1"><a class="header-anchor" href="#let、const-和-window" aria-hidden="true">#</a> let、const 和 window</h2><p>在全局通過 var 聲明一個變數時，這個變數會作為屬性放到 window 物件中：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>foo<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>而 let 和 const 作為新的語法被 JS 引擎分開處理，放到一張獨立的哈希表 （Hash map） 中。</p><h2 id="塊極作用域" tabindex="-1"><a class="header-anchor" href="#塊極作用域" aria-hidden="true">#</a> 塊極作用域</h2><p>在 ES5 中只有兩個東西會形成作用域，第一個是全局作用域，第二個是函數作用域。</p><p>在 ES6 中的 let、const、class 存在塊極作用域，外部無法訪問作用域內部的變數：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">{</span>\n  <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// foo is not defined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>if 後面跟的就是塊極作用域：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// foo is not defined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>switch 和 for 迴圈也是：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token string">&#39;a&#39;</span>\n<span class="token keyword">switch</span> <span class="token punctuation">(</span>bar<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token string">&#39;a&#39;</span><span class="token operator">:</span>\n    <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>\n    <span class="token keyword">break</span>\n\n  <span class="token keyword">default</span><span class="token operator">:</span>\n    <span class="token keyword">break</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment">// foo is not defined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Hello World&#39;</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token comment">// i is not defined</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="塊極作用域的用處" tabindex="-1"><a class="header-anchor" href="#塊極作用域的用處" aria-hidden="true">#</a> 塊極作用域的用處</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>執行以上程式碼會得到十個 10 的打印，因為 var 沒有塊極作用域，所以變數是保存在全局中，要想要分別打印出每個 i 的值，在 ES5 中可以使用函數作用域。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>有了 es6 就不用寫這麼複雜了：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="暫時性死區" tabindex="-1"><a class="header-anchor" href="#暫時性死區" aria-hidden="true">#</a> 暫時性死區</h3><p>在 ES6 中，let 和 const 在聲明之前，變數是都不可以被問的，社區將其稱為暫時性死區（temporal dead zone）。</p><p>類似以下這種程式碼，只要有使用到 let，都是不能被訪問的：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span>\n\n  <span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token string">&#39;abg&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>報錯：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>ReferenceError: Cannot access &#39;foo&#39; before initialization\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="var、const、let-的選擇" tabindex="-1"><a class="header-anchor" href="#var、const、let-的選擇" aria-hidden="true">#</a> var、const、let 的選擇</h2><p>var 的特殊性：比如作用域提升、window 全局物件屬性、沒有塊極作用域等，這些都是歷史遺留的問題，是在 JavaScript 設計之初的一些缺陷，所以在實際業務中還是以最新的標準來編寫程式碼，也就是不再用 var 來定義變數。</p><p>ES6 中的 const 可以保證數據的安全性，所以在開發中優先使用，只有在明確該變數會在後續進行修改時再使用 let。</p>',42),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])}}]);