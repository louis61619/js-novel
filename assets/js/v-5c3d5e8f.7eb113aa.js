"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[271],{1361:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-5c3d5e8f",path:"/front-end/javascript/5_functional-programming.html",title:"函式程式設計",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"純函數(Pure function)",slug:"純函數-pure-function",children:[{level:3,title:"純函數案例：",slug:"純函數案例",children:[]},{level:3,title:"純函數的優勢",slug:"純函數的優勢",children:[]}]},{level:2,title:"柯里化(Currying)",slug:"柯里化-currying",children:[{level:3,title:"爲什麼需要柯里化",slug:"爲什麼需要柯里化",children:[]},{level:3,title:"實現一個對函數進行柯里化的函數",slug:"實現一個對函數進行柯里化的函數",children:[]}]},{level:2,title:"組合函數(Compose function)",slug:"組合函數-compose-function",children:[{level:3,title:"一個實現對傳入函數進行組合的函數",slug:"一個實現對傳入函數進行組合的函數",children:[]}]}],filePathRelative:"front-end/javascript/5_functional-programming.md",git:{updatedTime:1665400196e3,contributors:[{name:"louis61619",email:"louis61619@gmail.com",commits:1}]}}},1189:(n,s,a)=>{a.r(s),a.d(s,{default:()=>F});var p=a(6252);const e=(0,p._)("h1",{id:"函式程式設計",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#函式程式設計","aria-hidden":"true"},"#"),(0,p.Uk)(" 函式程式設計")],-1),t=(0,p._)("p",null,"函數式程式設計（ Funtional Programming ）又稱函數式編程，JavaScript 具備了函數式編程的幾種重要的特徵，而許多框架比如：React，都非常受到函數式編程這個概念的影響，所以了解一下函數式編程的幾種基本概念是非常重要的。",-1),o=(0,p._)("h2",{id:"純函數-pure-function",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#純函數-pure-function","aria-hidden":"true"},"#"),(0,p.Uk)(" 純函數(Pure function)")],-1),c=(0,p._)("p",null,"不論是在 React 中使用 React hook、Redux 或是在 Vue3 中使用 composition api，純函數的概念都相當重要。",-1),l=(0,p._)("p",null,"純函數在維基中的定義為：",-1),r=(0,p._)("li",null,"此函數在相同的輸入值時，需產生相同的輸出。",-1),u=(0,p.Uk)("函數的輸出和輸入值以外的其他隱藏信息或"),i={href:"https://zh.wikipedia.org/w/index.php?title=%E7%A8%8B%E5%BC%8F%E7%8B%80%E6%85%8B&action=edit&redlink=1",target:"_blank",rel:"noopener noreferrer"},k=(0,p.Uk)("狀態"),b=(0,p.Uk)("無關，也和由"),d={href:"https://zh.wikipedia.org/wiki/I/O",target:"_blank",rel:"noopener noreferrer"},m=(0,p.Uk)("I/O"),g=(0,p.Uk)("設備產生的外部輸出無關。"),v=(0,p.Uk)("該函數不能有語義上可觀察的"),f={href:"https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0%E5%89%AF%E4%BD%9C%E7%94%A8",target:"_blank",rel:"noopener noreferrer"},y=(0,p.Uk)("函數副作用"),h=(0,p.Uk)("，諸如「觸發事件」，使輸出設備輸出，或更改輸出值以外物件的內容等。"),w=(0,p.uE)('<p>可以簡單總結一下：</p><ul><li>確定的輸入，一定會產生確定的輸出。</li><li>函數在執行的過程中，不能產生<strong>副作用</strong>。</li></ul><blockquote><p>副作用(side effect)：在計算機科學中，表示一個函數在執行時，除了返回值之外，還產生了一些其他附加的影響，比如修改了全局變數、修改傳入參數的值等等。</p></blockquote><h3 id="純函數案例" tabindex="-1"><a class="header-anchor" href="#純函數案例" aria-hidden="true">#</a> 純函數案例：</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> num1 <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> num2 <span class="token operator">*</span> <span class="token number">3</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>函數 foo 遵循純函數的規則，確定的輸入產生確定的輸出，在執行過程中不產生副作用。</p><p>非純函數案例：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">num1<span class="token punctuation">,</span> num2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  a <span class="token operator">=</span> <span class="token string">&#39;bca&#39;</span>\n  <span class="token keyword">return</span> num1 <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> num2 <span class="token operator">*</span> <span class="token number">3</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>可以看到函數 bar 明顯有對函數外部的變數進行更動，這就明顯不是純函數。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token parameter">info</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  info<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">100</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Louis&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">19</span> <span class="token punctuation">}</span>\n<span class="token function">baz</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>函數 baz 對引用的參數進行了修改，這也並非純函數，如果要遵守純函數的設計原則，應該是：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token parameter">info</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token operator">...</span>info<span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token number">100</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>透過解構語法產生新的物件，再對新的物件進行修改。</p><h3 id="純函數的優勢" tabindex="-1"><a class="header-anchor" href="#純函數的優勢" aria-hidden="true">#</a> 純函數的優勢</h3><p>純函數在使用上因為可以確保不會有任何函數外部的值被調用，所以開發者只需要關心函數的輸入，而輸入的內容在純函數中也是不被允許修改的，當輸入輸出確定，對開發者的心智負擔也會更低，在大型軟件開發時更具有優勢。</p><p>現代前端框架中，比如 React，框架要求使用者在進行設計的時候，函數組件必須是個純函數：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">HelloWorld</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  props<span class="token punctuation">.</span>info <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>像是以上直接對 props 修改的操作，在 React 中是不被允許的。</p><h2 id="柯里化-currying" tabindex="-1"><a class="header-anchor" href="#柯里化-currying" aria-hidden="true">#</a> 柯里化(Currying)</h2><p>維基百科中對柯理化的定義如下：</p>',20),j=(0,p._)("strong",null,"柯里化",-1),x=(0,p.Uk)("是把接受多個"),z={href:"https://zh.wikipedia.org/wiki/%E5%8F%83%E6%95%B8_(%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88)",target:"_blank",rel:"noopener noreferrer"},_=(0,p.Uk)("參數"),E=(0,p.Uk)("的"),U={href:"https://zh.wikipedia.org/wiki/%E5%87%BD%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},C=(0,p.Uk)("函數"),A=(0,p.Uk)("變換成接受一個單一參數（最初函數的第一個參數）的函數，並且返回接受餘下的參數而且返回結果的新函數的技術。"),B=(0,p.uE)('<p>在直覺上，柯里化聲稱「如果你固定某些參數，你將得到接受餘下參數的一個函數」。</p><p>來舉一個函數柯里化的過程做為例子：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果要對 add 函數進行柯里化，可以修改成：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add1</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果覺得要不斷 return 非常麻煩，以上的 add1 函數其實等價於：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token function-variable function">add2</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token parameter">z</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>相對於一般的函數直接傳入參數，柯里化後的函數是一層層將參數傳入的：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">add2</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="爲什麼需要柯里化" tabindex="-1"><a class="header-anchor" href="#爲什麼需要柯里化" aria-hidden="true">#</a> 爲什麼需要柯里化</h3><p>如果將函數柯里化，可以將一個大的複雜函數拆解成不同的<strong>單一職責</strong>的小函數並返回，這些小函數更有利於<strong>重複使用</strong>。</p><p>如果有一個函數需要對 x, y, z 三個參數進行計算：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  x <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">2</span>\n  y <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token number">2</span>\n  z <span class="token operator">=</span> z <span class="token operator">*</span> z\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>我們可以將 add 函數拆解成不同的只有單一職則的函數：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  x <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> x\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    y <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token number">2</span>\n    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      z <span class="token operator">=</span> z <span class="token operator">*</span> z\n      <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>這樣做可以不斷的利用返回的函數，比如對每一次返回的函數進行賦值：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 0+2=2 x:2</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 3*2=6 y:6</span>\n<span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 4*4=16 x+y+z=24</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>這樣就可以重複使用 foo 函數：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 4*2=6 y:8</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 5*5=25 x+y+z=35</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="實現一個對函數進行柯里化的函數" tabindex="-1"><a class="header-anchor" href="#實現一個對函數進行柯里化的函數" aria-hidden="true">#</a> 實現一個對函數進行柯里化的函數</h3><p>透過以下這樣一個簡練的函數能對一般的函數進行柯里化：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myCurring</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">curried</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 判斷fn的函數和當前傳入的函數數量是否一致</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> fn<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 要使用apply才能將外層綁定的this傳入</span>\n      <span class="token keyword">return</span> <span class="token function">fn</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token comment">// 使用遞歸重複調用curried，重點是將下次傳入的參數拼接上次傳入的參數</span>\n      <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token function">curried</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span>args<span class="token punctuation">,</span> <span class="token operator">...</span>args2<span class="token punctuation">]</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">return</span> curried\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>例如將這個 add 函數透過 myCurring 函數進行轉化，就可以使用柯里化的方式調用：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  x <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token number">2</span>\n  y <span class="token operator">=</span> y <span class="token operator">*</span> <span class="token number">2</span>\n  z <span class="token operator">=</span> z <span class="token operator">*</span> z\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> curringAdd <span class="token operator">=</span> <span class="token function">myCurring</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span>\n<span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token function">curringAdd</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 950</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="組合函數-compose-function" tabindex="-1"><a class="header-anchor" href="#組合函數-compose-function" aria-hidden="true">#</a> 組合函數(Compose function)</h2><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token number">2</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> num <span class="token operator">**</span> <span class="token number">2</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>假設要對以上兩個函數連續進行調用，如下：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token function">double</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>也可以寫一個函數返回一個新函數再調用：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">composeFn</span><span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">count</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token function">m</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">const</span> doubleAndSquare <span class="token operator">=</span> <span class="token function">composeFn</span><span class="token punctuation">(</span>double<span class="token punctuation">,</span> square<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">doubleAndSquare</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>composeFn 就是一個組合函數。</p><h3 id="一個實現對傳入函數進行組合的函數" tabindex="-1"><a class="header-anchor" href="#一個實現對傳入函數進行組合的函數" aria-hidden="true">#</a> 一個實現對傳入函數進行組合的函數</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">myCompose</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>fns</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> fnsLength <span class="token operator">=</span> fns<span class="token punctuation">.</span>length\n  <span class="token comment">// 判斷fns有沒有非函數</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> fnsLength<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!==</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;Excepted arguments are function&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> index <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">var</span> result <span class="token operator">=</span> fnsLength <span class="token operator">?</span> fns<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span> <span class="token operator">:</span> args\n    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">++</span>index <span class="token operator">&lt;</span> fnsLength<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      result <span class="token operator">=</span> fns<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> result\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> compose\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>同樣的利用以上這個函數能夠直接實現對函數進行組合：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">double</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token number">2</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> num <span class="token operator">**</span> <span class="token number">2</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> doubleAndSquare <span class="token operator">=</span> <span class="token function">myCompose</span><span class="token punctuation">(</span>double<span class="token punctuation">,</span> square<span class="token punctuation">)</span>\n\n<span class="token comment">// 400</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">doubleAndSquare</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div>',36),q={},F=(0,a(3744).Z)(q,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,t,o,c,l,(0,p._)("ul",null,[r,(0,p._)("li",null,[u,(0,p._)("a",i,[k,(0,p.Wm)(a)]),b,(0,p._)("a",d,[m,(0,p.Wm)(a)]),g]),(0,p._)("li",null,[v,(0,p._)("a",f,[y,(0,p.Wm)(a)]),h])]),w,(0,p._)("p",null,[j,x,(0,p._)("a",z,[_,(0,p.Wm)(a)]),E,(0,p._)("a",U,[C,(0,p.Wm)(a)]),A]),B],64)}]])}}]);