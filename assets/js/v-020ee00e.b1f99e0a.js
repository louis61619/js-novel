"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[591],{3873:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-020ee00e",path:"/front-end/javascript/12_es7-es12.html",title:"ES7~ES12",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"ES7",slug:"es7",children:[{level:3,title:"includes 方法",slug:"includes-方法",children:[]},{level:3,title:"指數運算",slug:"指數運算",children:[]}]},{level:2,title:"ES8",slug:"es8",children:[{level:3,title:"Object.values",slug:"object-values",children:[]},{level:3,title:"Object.entries",slug:"object-entries",children:[]},{level:3,title:"padStart 和 padEnd",slug:"padstart-和-padend",children:[]},{level:3,title:"async",slug:"async",children:[]}]},{level:2,title:"ES9",slug:"es9",children:[{level:3,title:"Async iterators",slug:"async-iterators",children:[]},{level:3,title:"Object spread operators",slug:"object-spread-operators",children:[]},{level:3,title:"Promise finally",slug:"promise-finally",children:[]}]},{level:2,title:"ES10",slug:"es10",children:[{level:3,title:"flat",slug:"flat",children:[]},{level:3,title:"flatMap",slug:"flatmap",children:[]},{level:3,title:"Object.fromEntries",slug:"object-fromentries",children:[]},{level:3,title:"trimStart 和 trimEnd",slug:"trimstart-和-trimend",children:[]},{level:3,title:"Symbol description",slug:"symbol-description",children:[]},{level:3,title:"Optional catch binding",slug:"optional-catch-binding",children:[]}]},{level:2,title:"ES11",slug:"es11",children:[{level:3,title:"bigInt",slug:"bigint",children:[]},{level:3,title:"Nullish Coalecing operator",slug:"nullish-coalecing-operator",children:[]},{level:3,title:"Optional chaining",slug:"optional-chaining",children:[]},{level:3,title:"globalThis",slug:"globalthis",children:[]},{level:3,title:"Dynamic Import",slug:"dynamic-import",children:[]},{level:3,title:"Promise.allSettled",slug:"promise-allsettled",children:[]},{level:3,title:"import meta",slug:"import-meta",children:[]}]},{level:2,title:"ES12",slug:"es12",children:[{level:3,title:"FinalizationRegistry",slug:"finalizationregistry",children:[]},{level:3,title:"WeakRef",slug:"weakref",children:[]},{level:3,title:"logical assignment operator",slug:"logical-assignment-operator",children:[]},{level:3,title:"Numeric Seprator",slug:"numeric-seprator",children:[]},{level:3,title:"String.replaceAll：",slug:"string-replaceall",children:[]}]}],filePathRelative:"front-end/javascript/12_es7-es12.md",git:{updatedTime:1665400196e3,contributors:[{name:"louis61619",email:"louis61619@gmail.com",commits:1}]}}},4662:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const e=(0,a(6252).uE)('<h1 id="es7-es12" tabindex="-1"><a class="header-anchor" href="#es7-es12" aria-hidden="true">#</a> ES7~ES12</h1><p>相對於 ES6 的大更新，ES7 之後就沒有做出巨大的更迭，僅僅是加入了一些比較小的改動。</p><h2 id="es7" tabindex="-1"><a class="header-anchor" href="#es7" aria-hidden="true">#</a> ES7</h2><h3 id="includes-方法" tabindex="-1"><a class="header-anchor" href="#includes-方法" aria-hidden="true">#</a> includes 方法</h3><p>在沒有這個方法之前，通常是透過 indexOf 方法判斷陣列有沒有包含所需要的元素：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cba&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ndv&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fjd&#39;</span><span class="token punctuation">]</span>\n\n<span class="token keyword">if</span> <span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">&#39;cba&#39;</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;包含該元素&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>有了 includes 方法之後，可以用該方法進行判斷，並且相對 indexOf 更增加了對 NaN 這個元素判斷的支持：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cba&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ndv&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fjd&#39;</span><span class="token punctuation">,</span> <span class="token number">NaN</span><span class="token punctuation">]</span>\n\n<span class="token comment">// 第一個參數為要判斷的值，第二個參數為從第幾個元素開始</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>names<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;包含該元素&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="指數運算" tabindex="-1"><a class="header-anchor" href="#指數運算" aria-hidden="true">#</a> 指數運算</h3><p>在 ES7 之前要做指數運算可能會通過 Math.pow 完成， ES7 新增了一個對指數運算的簡化寫法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 3的3次方</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">3</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="es8" tabindex="-1"><a class="header-anchor" href="#es8" aria-hidden="true">#</a> ES8</h2><h3 id="object-values" tabindex="-1"><a class="header-anchor" href="#object-values" aria-hidden="true">#</a> Object.values</h3><p>透過 Object.values 可以獲取物件中的所有值：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Louis&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">26</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// [ &#39;Louis&#39;, 26 ]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>傳入字符串的話會被拆分：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// [ &#39;L&#39;, &#39;o&#39;, &#39;u&#39;, &#39;i&#39;, &#39;s&#39; ]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token string">&#39;Louis&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="object-entries" tabindex="-1"><a class="header-anchor" href="#object-entries" aria-hidden="true">#</a> Object.entries</h3><p>物件透過 Object.entries 方法可以獲取到一個陣列，該陣列的元素是物件中的 key 和 value 組成：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Louis&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">26</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// [ [ &#39;name&#39;, &#39;Louis&#39; ], [ &#39;age&#39;, 26 ] ]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>也可以傳入陣列，key 就替換為陣列的下標值：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;ald&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ajj&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fif&#39;</span><span class="token punctuation">]</span>\n\n<span class="token comment">// [ [ &#39;0&#39;, &#39;ald&#39; ], [ &#39;1&#39;, &#39;ajj&#39; ], [ &#39;2&#39;, &#39;fif&#39; ] ]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="padstart-和-padend" tabindex="-1"><a class="header-anchor" href="#padstart-和-padend" aria-hidden="true">#</a> padStart 和 padEnd</h3><p>這兩個方法都可以對字符串進行填充，padStart 是往前面加，padEnd 是往後面加：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span>\n\n<span class="token keyword">const</span> newMessage <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">padStart</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token string">&#39;*&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">padEnd</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// ****Hello World-----</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newMessage<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="async" tabindex="-1"><a class="header-anchor" href="#async" aria-hidden="true">#</a> async</h3><p>非同步函數：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// await</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="es9" tabindex="-1"><a class="header-anchor" href="#es9" aria-hidden="true">#</a> ES9</h2><h3 id="async-iterators" tabindex="-1"><a class="header-anchor" href="#async-iterators" aria-hidden="true">#</a> Async iterators</h3><h3 id="object-spread-operators" tabindex="-1"><a class="header-anchor" href="#object-spread-operators" aria-hidden="true">#</a> Object spread operators</h3><p>物件展開運算符。</p><h3 id="promise-finally" tabindex="-1"><a class="header-anchor" href="#promise-finally" aria-hidden="true">#</a> Promise finally</h3><h2 id="es10" tabindex="-1"><a class="header-anchor" href="#es10" aria-hidden="true">#</a> ES10</h2><h3 id="flat" tabindex="-1"><a class="header-anchor" href="#flat" aria-hidden="true">#</a> flat</h3><p>對陣列的進行降維，參數為進行到第幾層：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n\n<span class="token comment">// [ 10, 20, 2, 9, 9, [ 30, [ 40, 20, 40 ] ] ]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// [ 10, 20, 2, 9, 9, 30, 40, 20, 40 ]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">flat</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="flatmap" tabindex="-1"><a class="header-anchor" href="#flatmap" aria-hidden="true">#</a> flatMap</h3><p>在對陣列進行循環操作後，會對返回值進行降維：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> messages <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;Hello everyone&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;My name is Louis&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;I am 26 years old&#39;</span><span class="token punctuation">]</span>\n<span class="token keyword">const</span> newMessages <span class="token operator">=</span> messages<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> item<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// [</span>\n<span class="token comment">//   &#39;Hello&#39;, &#39;everyone&#39;,</span>\n<span class="token comment">//   &#39;My&#39;,    &#39;name&#39;,</span>\n<span class="token comment">//   &#39;is&#39;,    &#39;Louis&#39;,</span>\n<span class="token comment">//   &#39;I&#39;,     &#39;am&#39;,</span>\n<span class="token comment">//   &#39;26&#39;,    &#39;years&#39;,</span>\n<span class="token comment">//   &#39;old&#39;</span>\n<span class="token comment">// ]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newMessages<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="object-fromentries" tabindex="-1"><a class="header-anchor" href="#object-fromentries" aria-hidden="true">#</a> Object.fromEntries</h3><p>可以將一個可迭代的 entries 物件轉換成一般的鍵值對物件：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> entries <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;Louis&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token string">&#39;age&#39;</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">]</span>\n<span class="token punctuation">]</span>\n\n<span class="token comment">// ES10 新增了 Object.fromEntries 方法</span>\n<span class="token keyword">const</span> newObj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>entries<span class="token punctuation">)</span>\n\n<span class="token comment">// { name: &#39;why&#39;, age: &#39;26&#39;, height: &#39;1.73&#39; }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj2<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="trimstart-和-trimend" tabindex="-1"><a class="header-anchor" href="#trimstart-和-trimend" aria-hidden="true">#</a> trimStart 和 trimEnd</h3><p>trimStart 去除開始的空格，trimEnd 去除尾部的空格。</p><h3 id="symbol-description" tabindex="-1"><a class="header-anchor" href="#symbol-description" aria-hidden="true">#</a> Symbol description</h3><p>Symbol 數據的描述。</p><h3 id="optional-catch-binding" tabindex="-1"><a class="header-anchor" href="#optional-catch-binding" aria-hidden="true">#</a> Optional catch binding</h3><h2 id="es11" tabindex="-1"><a class="header-anchor" href="#es11" aria-hidden="true">#</a> ES11</h2><h3 id="bigint" tabindex="-1"><a class="header-anchor" href="#bigint" aria-hidden="true">#</a> bigInt</h3><p>在 ES11 之前，最大安全數字為 Number.MAX_SAFE_INTEGER ，在 ES11 多了一種大數類型：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// ES11 BigInt</span>\n<span class="token keyword">const</span> bigInt <span class="token operator">=</span> <span class="token number">9007199254740991028383n</span>\n\n<span class="token comment">// 要進行加減需要相同類型</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bigInt <span class="token operator">+</span> <span class="token number">100n</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token number">100</span>\n<span class="token comment">// 9007199254740991028483n</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bigInt <span class="token operator">+</span> <span class="token function">BigInt</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="nullish-coalecing-operator" tabindex="-1"><a class="header-anchor" href="#nullish-coalecing-operator" aria-hidden="true">#</a> Nullish Coalecing operator</h3><p>空值合併運算符（Nullish Coalecing operator）會將 0 、 false 和 空字串不視為 undefined：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token boolean">false</span>\n\n<span class="token comment">// 邏輯或會將 0 、 false 和 空字串同樣視為 undefined</span>\n<span class="token keyword">const</span> baz <span class="token operator">=</span> foo <span class="token operator">||</span> <span class="token string">&#39;default Value&#39;</span>\n\n<span class="token keyword">const</span> bar <span class="token operator">=</span> foo <span class="token operator">??</span> <span class="token string">&#39;default Value&#39;</span>\n\n<span class="token comment">// 輸出：default Value , false</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baz<span class="token punctuation">,</span> bar<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="optional-chaining" tabindex="-1"><a class="header-anchor" href="#optional-chaining" aria-hidden="true">#</a> Optional chaining</h3><p>可選鏈 （Optional chaining）可以對物件屬性進行是否為空的判斷：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Louis&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// 報錯無法執行</span>\n<span class="token comment">// console.log(info.friend.name)</span>\n\n<span class="token comment">// 輸出：undefined</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span>friend<span class="token operator">?.</span>name<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="globalthis" tabindex="-1"><a class="header-anchor" href="#globalthis" aria-hidden="true">#</a> globalThis</h3><p>全局物件，瀏覽器中是 windo，nodejs 環境中是 global。</p><h3 id="dynamic-import" tabindex="-1"><a class="header-anchor" href="#dynamic-import" aria-hidden="true">#</a> Dynamic Import</h3><p>動態導入模塊，ES Module 中解釋。</p><h3 id="promise-allsettled" tabindex="-1"><a class="header-anchor" href="#promise-allsettled" aria-hidden="true">#</a> Promise.allSettled</h3><h3 id="import-meta" tabindex="-1"><a class="header-anchor" href="#import-meta" aria-hidden="true">#</a> import meta</h3><h2 id="es12" tabindex="-1"><a class="header-anchor" href="#es12" aria-hidden="true">#</a> ES12</h2><h3 id="finalizationregistry" tabindex="-1"><a class="header-anchor" href="#finalizationregistry" aria-hidden="true">#</a> FinalizationRegistry</h3><p>創建一個實例用來監測某些物件被銷毀，當註冊的物件被銷毀時，會調用 FinalizationRegistry 傳入的函數：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> finalRegistry <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FinalizationRegistry</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;object is destroy&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Louis&#39;</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// 第一個參數為監測的物件，第二個參數做為 value 傳入 callback 中</span>\nfinalRegistry<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;obj&#39;</span><span class="token punctuation">)</span>\n\nobj <span class="token operator">=</span> <span class="token keyword">null</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="weakref" tabindex="-1"><a class="header-anchor" href="#weakref" aria-hidden="true">#</a> WeakRef</h3><p>使用<strong>弱引用</strong>對某個物件：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Louis&#39;</span> <span class="token punctuation">}</span>\n<span class="token keyword">let</span> info <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakRef</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span>\n\nobj <span class="token operator">=</span> <span class="token keyword">null</span>\n\n<span class="token comment">// 之後 GC 就會對 obj 本身引用的物件進行回收</span>\n<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// undefined</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>info<span class="token punctuation">.</span><span class="token function">deref</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="logical-assignment-operator" tabindex="-1"><a class="header-anchor" href="#logical-assignment-operator" aria-hidden="true">#</a> logical assignment operator</h3><p>邏輯或的簡化寫法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n<span class="token comment">// message = message || &#39;default value&#39;</span>\nmessage <span class="token operator">||=</span> <span class="token string">&#39;default value&#39;</span>\n\n<span class="token comment">// default value</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>邏輯與的簡化寫法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> myName <span class="token operator">=</span> <span class="token string">&#39;Louis&#39;</span>\n<span class="token keyword">let</span> otherName <span class="token operator">=</span> <span class="token string">&#39;Renny&#39;</span>\n\nmyName <span class="token operator">&amp;&amp;=</span> otherName\n\n<span class="token comment">// Renny</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myName<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>邏輯空的簡化寫法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n<span class="token comment">// message = message ?? &#39;default value&#39;</span>\nmessage <span class="token operator">??=</span> <span class="token string">&#39;default value&#39;</span>\n\n<span class="token comment">// 輸出為空字串</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message1<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="numeric-seprator" tabindex="-1"><a class="header-anchor" href="#numeric-seprator" aria-hidden="true">#</a> Numeric Seprator</h3><p>數字連接符：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>const number = 100_000_000_000\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="string-replaceall" tabindex="-1"><a class="header-anchor" href="#string-replaceall" aria-hidden="true">#</a> String.replaceAll：</h3><p>字符串替換。</p>',83),p={},t=(0,a(3744).Z)(p,[["render",function(n,s){return e}]])}}]);