"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[987],{8843:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-3a6a1204",path:"/front-end/javascript/10_es6-syntactic-sugar.html",title:"ES6 語法糖",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"字面量增強寫法",slug:"字面量增強寫法",children:[{level:3,title:"屬性簡寫（ property shorthand ）",slug:"屬性簡寫-property-shorthand",children:[]},{level:3,title:"方法簡寫 （ method shorthand ）",slug:"方法簡寫-method-shorthand",children:[]},{level:3,title:"計算屬性名（ computed property name ）",slug:"計算屬性名-computed-property-name",children:[]}]},{level:2,title:"解構賦值",slug:"解構賦值",children:[{level:3,title:"陣列解構",slug:"陣列解構",children:[]},{level:3,title:"物件解構",slug:"物件解構",children:[]}]},{level:2,title:"模板字符串",slug:"模板字符串",children:[]},{level:2,title:"標籤模板字符串",slug:"標籤模板字符串",children:[]},{level:2,title:"函數中參數的默認值",slug:"函數中參數的默認值",children:[]},{level:2,title:"函數的剩餘參數",slug:"函數的剩餘參數",children:[]},{level:2,title:"箭頭函數",slug:"箭頭函數",children:[]},{level:2,title:"ES6 中的展開語法",slug:"es6-中的展開語法",children:[]},{level:2,title:"ES6 中的數值",slug:"es6-中的數值",children:[]},{level:2,title:"Symbol",slug:"symbol",children:[]}],filePathRelative:"front-end/javascript/10_es6-syntactic-sugar.md",git:{updatedTime:1665400196e3,contributors:[{name:"louis61619",email:"louis61619@gmail.com",commits:1}]}}},3499:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="es6-語法糖" tabindex="-1"><a class="header-anchor" href="#es6-語法糖" aria-hidden="true">#</a> ES6 語法糖</h1><p>語法糖（英語：Syntactic sugar）是由英國電腦科學家彼得·蘭丁發明的一個術語，指程式語言中添加的某種語法，這種語法對語言的功能沒有影響，但是更方便程式設計師使用。 語法糖讓程式更加簡潔，有更高的可讀性。</p><h2 id="字面量增強寫法" tabindex="-1"><a class="header-anchor" href="#字面量增強寫法" aria-hidden="true">#</a> 字面量增強寫法</h2><p>通過某些簡化的寫法來創建物件。</p><h3 id="屬性簡寫-property-shorthand" tabindex="-1"><a class="header-anchor" href="#屬性簡寫-property-shorthand" aria-hidden="true">#</a> 屬性簡寫（ property shorthand ）</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Louis&#39;</span>\n<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">26</span>\n\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// property shorthand(屬性簡寫)</span>\n  name<span class="token punctuation">,</span>\n  age\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="方法簡寫-method-shorthand" tabindex="-1"><a class="header-anchor" href="#方法簡寫-method-shorthand" aria-hidden="true">#</a> 方法簡寫 （ method shorthand ）</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// method shorthand(方法簡寫)</span>\n  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="計算屬性名-computed-property-name" tabindex="-1"><a class="header-anchor" href="#計算屬性名-computed-property-name" aria-hidden="true">#</a> 計算屬性名（ computed property name ）</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Louis&#39;</span>\n<span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">26</span>\n\n<span class="token keyword">var</span> key <span class="token operator">=</span> name <span class="token operator">+</span> age\n\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token comment">// computed property name(計算屬性名)</span>\n  <span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">20</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="解構賦值" tabindex="-1"><a class="header-anchor" href="#解構賦值" aria-hidden="true">#</a> 解構賦值</h2><h3 id="陣列解構" tabindex="-1"><a class="header-anchor" href="#陣列解構" aria-hidden="true">#</a> 陣列解構</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;acb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bca&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">]</span>\n\n<span class="token keyword">var</span> <span class="token punctuation">[</span>item1<span class="token punctuation">,</span> item2<span class="token punctuation">,</span> item3<span class="token punctuation">]</span> <span class="token operator">=</span> array\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>可以只對後面的元素進行解構，只要在前面加上 <code>,</code> ：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;acb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bca&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">]</span>\n\n<span class="token keyword">var</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> item2<span class="token punctuation">,</span> item3<span class="token punctuation">]</span> <span class="token operator">=</span> array\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>解構出一個元素，後面的元素放入一個新陣列：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;acb&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bca&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">]</span>\n\n<span class="token keyword">var</span> <span class="token punctuation">[</span>item1<span class="token punctuation">,</span> <span class="token operator">...</span>newArray<span class="token punctuation">]</span> <span class="token operator">=</span> array\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>給予默認值：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> <span class="token punctuation">[</span>item1<span class="token punctuation">,</span> item2<span class="token punctuation">,</span> item3<span class="token punctuation">,</span> item4 <span class="token operator">=</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> array\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="物件解構" tabindex="-1"><a class="header-anchor" href="#物件解構" aria-hidden="true">#</a> 物件解構</h3><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Louis&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span>\n  height<span class="token operator">:</span> <span class="token number">1.75</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> age<span class="token punctuation">,</span> height <span class="token punctuation">}</span> <span class="token operator">=</span> obj\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>改變 key 的名稱：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Louis&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span>\n  height<span class="token operator">:</span> <span class="token number">1.75</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> newName <span class="token punctuation">}</span> <span class="token operator">=</span> obj\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>給予默認值：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Louis&#39;</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">26</span><span class="token punctuation">,</span>\n  height<span class="token operator">:</span> <span class="token number">1.75</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> <span class="token punctuation">{</span> address <span class="token operator">=</span> <span class="token string">&#39;新北市&#39;</span> <span class="token punctuation">}</span> <span class="token operator">=</span> obj\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="模板字符串" tabindex="-1"><a class="header-anchor" href="#模板字符串" aria-hidden="true">#</a> 模板字符串</h2><p>在 ES6 之前拼接字符串，需要使用 + 號 ：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Louis&#39;</span>\n\n<span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">18</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;my name is &#39;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&#39;, age is &#39;</span> <span class="token operator">+</span> age<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>ES6 之後可以使用模板字符串：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Louis&#39;</span>\n\n<span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">18</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, age is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>可以在 ${} 內寫任意表達式：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Louis&#39;</span>\n\n<span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">18</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, age is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>age <span class="token operator">*</span> <span class="token number">2</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n\n<span class="token keyword">function</span> <span class="token function">doubleAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> age <span class="token operator">*</span> <span class="token number">2</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, age is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token function">doubleAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="標籤模板字符串" tabindex="-1"><a class="header-anchor" href="#標籤模板字符串" aria-hidden="true">#</a> 標籤模板字符串</h2><p>可以將模板字符串作為參數傳入函數中，第一個參數是模板字符串中整個字符串，只是會被 ${} 切成多塊，放到一個陣列中，接下來的參數都依序是 ${} 中的值：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span> n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Louis&#39;</span>\n\nfoo<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hello</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">World</span><span class="token template-punctuation string">`</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>輸出：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>[ &#39;Hello&#39;, &#39;World&#39; ] Louis\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>標籤模板字符串在一般中很少用到，不過如果在 React 中有使用到 styled-components 這個庫，就會大量用使用標籤模板字符串。</p><h2 id="函數中參數的默認值" tabindex="-1"><a class="header-anchor" href="#函數中參數的默認值" aria-hidden="true">#</a> 函數中參數的默認值</h2><p>ES6 之後給函數中的參數默認值，非常方便：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>m <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>或是可以直接在參數做解構：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">printInfo</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">,</span> age <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Louis&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">26</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>有默認值之後的參數都不放在 length 中：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">,</span> j</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// 3</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>baz<span class="token punctuation">.</span>length<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="函數的剩餘參數" tabindex="-1"><a class="header-anchor" href="#函數的剩餘參數" aria-hidden="true">#</a> 函數的剩餘參數</h2><p>ES6 中引用了 rest parameter，可以將不定量的參數放入陣列中：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">m<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>相較於 arguments ， ES6 提供的 rest parameter 只包含沒有對應形參的實際參數，而 arguments 包含了所有傳遞給函數的實參。</p><h2 id="箭頭函數" tabindex="-1"><a class="header-anchor" href="#箭頭函數" aria-hidden="true">#</a> 箭頭函數</h2><p>相對於普通函數：</p><ul><li>箭頭函數沒有 prototype 所以不作爲構造函數進行調用。</li><li>沒有 this。</li><li>沒有 arguments。</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="es6-中的展開語法" tabindex="-1"><a class="header-anchor" href="#es6-中的展開語法" aria-hidden="true">#</a> ES6 中的展開語法</h2><p>函數調用時：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;vj&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fjf&#39;</span><span class="token punctuation">]</span>\n\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token operator">...</span>names<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>構造陣列時：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;vj&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fjf&#39;</span><span class="token punctuation">]</span>\n\n<span class="token keyword">const</span> newNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>names<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>構造物件時：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> info <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;Louis&#39;</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token number">28</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// ES2018</span>\n<span class="token keyword">const</span> newInfo <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>info <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="es6-中的數值" tabindex="-1"><a class="header-anchor" href="#es6-中的數值" aria-hidden="true">#</a> ES6 中的數值</h2><p>在 ES6 中數值是可以用其他進制來進行表示的：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> num1 <span class="token operator">=</span> <span class="token number">100</span> <span class="token comment">// 十進制</span>\n<span class="token keyword">const</span> num2 <span class="token operator">=</span> <span class="token number">0b100</span> <span class="token comment">// 二進制</span>\n<span class="token keyword">const</span> num3 <span class="token operator">=</span> <span class="token number">0o100</span> <span class="token comment">// 八進制</span>\n<span class="token keyword">const</span> num4 <span class="token operator">=</span> <span class="token number">0x100</span> <span class="token comment">// 十六進制</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">,</span> num3<span class="token punctuation">,</span> num4<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>輸出：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>100 4 64 256\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="symbol" tabindex="-1"><a class="header-anchor" href="#symbol" aria-hidden="true">#</a> Symbol</h2><p>Symbol 是一個基本的數據類型，如果在物件要定義一屬性，而該屬性為了防止被覆蓋所以必須有一個唯一的 key ，就可以使用 Symbol 這個數據結構做為 key 。</p><p>使用字面量寫法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>s1<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token string">&#39;Louis&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>作為屬性新增：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> newObj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token comment">// 新增屬性</span>\nnewObj<span class="token punctuation">[</span>s2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Louis&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>使用 Object.defineProperty ：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\nObject<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> s1<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  enumerable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  configurable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  writable<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  value<span class="token operator">:</span> <span class="token string">&#39;Louis&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>如果要獲取物件中所有使用 Symbel 的 key 必須調用專門的方法 Object.getOwnPropertySymbols 。</p><p>透過 Symbol.for 可以定義一個相同的 key ：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> sa <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> ab <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 輸出為 true</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sa <span class="token operator">===</span> ab<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>透過 Symbol.keyFor 可以獲取 key :</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> sa <span class="token operator">=</span> Symbol<span class="token punctuation">.</span><span class="token function">for</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 輸出為 aaa</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Symbol<span class="token punctuation">.</span><span class="token function">keyFor</span><span class="token punctuation">(</span>sa<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>在 ES2019 中 symbel 可以傳入一段描述（description）:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> s1 <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token string">&#39;aaa&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',80),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])}}]);