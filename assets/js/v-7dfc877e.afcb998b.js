"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[530],{6277:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-7dfc877e",path:"/front-end/javascript/28_BOM.html",title:"BOM",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"EventTarget",slug:"eventtarget",children:[]},{level:2,title:"Location",slug:"location",children:[]},{level:2,title:"history",slug:"history",children:[]}],filePathRelative:"front-end/javascript/28_BOM.md",git:{updatedTime:1665400196e3,contributors:[{name:"louis61619",email:"louis61619@gmail.com",commits:1}]}}},1545:(n,s,a)=>{a.r(s),a.d(s,{default:()=>p});const t=(0,a(6252).uE)('<h1 id="bom" tabindex="-1"><a class="header-anchor" href="#bom" aria-hidden="true">#</a> BOM</h1><p>瀏覽器作為 JavaScript 最重要的運行環境之一，瀏覽器會有對應的物件模型（BOM，Browser Object Model）供 JavaScript 進行操作。</p><p>BOM 主要包含：</p><ul><li>window：包含全局屬性、方法、控制瀏覽器窗口的相關屬性、方法</li><li>location：瀏覽器的連接到的 URL</li><li>history：操作瀏覽器的歷史紀錄</li><li>document：當前窗口操作文檔的物件</li></ul><p>Window 物件在瀏覽器中有兩個身份：</p><ul><li>全局物件，這個全局物件在 Nodejs 中是 global</li><li>作為瀏覽器窗口，提供對瀏覽器操作的相關 API</li></ul><p>也就是說如果通過 var 聲明變數，該變數會被添加到 window 物件上，window 物件也提供了全局的類和函數：setTimeout、Math、Object 等。</p><p>Window 中除了包含大量的屬性和方法，也繼承了 EventTarget 的事件監聽方法，如：addEventListener、removeEventListener。</p><p>MDN 文檔中有對應的細節： https://developer.mozilla.org/zh-TW/docs/Web/API/Window</p><h2 id="eventtarget" tabindex="-1"><a class="header-anchor" href="#eventtarget" aria-hidden="true">#</a> EventTarget</h2><p>透過原型鏈可以查看到 window 所繼承的類：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>輸出：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>EventTarget {Symbol(Symbol.toStringTag): &#39;EventTarget&#39;, addEventListener: ƒ, dispatchEvent: ƒ, removeEventListener: ƒ, constructor: ƒ}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>EventTarget 最主要有三個方法：</p><p>addEventListener，監聽事件：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">clickHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;window 發生點擊&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> clickHandler<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>removeEventListener，取消監聽事件：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">clickHandler</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;window 發生點擊&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nwindow<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> clickHandler<span class="token punctuation">)</span>\nwindow<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> clickHandler<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>dispatchEvent，自訂事件派發：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;myEvent&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;myEvent~&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\nwindow<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Event</span><span class="token punctuation">(</span><span class="token string">&#39;myEvent&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="location" tabindex="-1"><a class="header-anchor" href="#location" aria-hidden="true">#</a> Location</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>http://127.0.0.1:5500/34_Cookie-DOM-BOM/index.html?q=bbb#aaa\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>如果 url 是以下，透過打印 location 物件能獲取詳細訊息：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>hash: &quot;#aaa&quot;\nhost: &quot;127.0.0.1:5500&quot;\nhostname: &quot;127.0.0.1&quot;\nhref: &quot;http://127.0.0.1:5500/34_Cookie-DOM-BOM/index.html?q=aaaa#aaa&quot;\norigin: &quot;http://127.0.0.1:5500&quot;\npathname: &quot;/34_Cookie-DOM-BOM/index.html&quot;\nport: &quot;5500&quot;\nprotocol: &quot;http:&quot;\nsearch: &quot;?q=bbb&quot;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>hash：哈希</li><li>host：主機地址＋端口好</li><li>hostname：主機地址</li><li>href：完整的 url 地址</li><li>origin：源</li><li>pathname：路徑</li><li>port：端口號</li><li>protocol：協議</li><li>search：查詢參數</li></ul><p>可以發先 location 就是一個 url 的抽象實現，常見的方法有幾個：</p><ul><li><p>跳轉頁面：location.assign(&quot;https://www.google.com&quot;)</p></li><li><p>跳轉頁面，不留下當前頁面的紀錄：location.replace(&quot;https://www.google.com&quot;)</p></li><li><p>重新加載頁面：location.reload()</p></li></ul><h2 id="history" tabindex="-1"><a class="header-anchor" href="#history" aria-hidden="true">#</a> history</h2><p>History 物件在現代前端框架中是相當重要的，透過刷新 history ，能夠在不請求服務器的情況下改變 url：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token string">&#39;Louis&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/detail&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>這時候 url 中的路徑會被改為 /detail，透過 history 物件能夠獲取狀態值和保留的歷史紀錄：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>length<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// Louis</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>history<span class="token punctuation">.</span>state<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><p>使用 replaceState 不會留下上一頁的紀錄：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code>history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token string">&#39;Louis&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;/detail&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>還有幾個方法：</p><ul><li>back：回退一頁，同 go(-1)</li><li>forward：前進一頁，同 go(1)</li><li>go：指定加載歷史中的一頁</li></ul>',38),e={},p=(0,a(3744).Z)(e,[["render",function(n,s){return t}]])}}]);