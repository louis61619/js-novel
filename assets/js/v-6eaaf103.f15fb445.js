"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[383],{6896:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-6eaaf103",path:"/front-end/javascript/17_iterator.html",title:"Iterator",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"可迭代物件",slug:"可迭代物件",children:[]}],filePathRelative:"front-end/javascript/17_iterator.md",git:{updatedTime:1665400196e3,contributors:[{name:"louis61619",email:"louis61619@gmail.com",commits:1}]}}},6206:(n,s,a)=>{a.r(s),a.d(s,{default:()=>F});var p=a(6252);const t=(0,p._)("h1",{id:"iterator",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#iterator","aria-hidden":"true"},"#"),(0,p.Uk)(" Iterator")],-1),e=(0,p._)("strong",null,"迭代器",-1),o=(0,p.Uk)("（iterator），是確使使用者可在容器物件（container，例如"),c={href:"https://zh.wikipedia.org/wiki/%E9%8F%88%E8%A1%A8",target:"_blank",rel:"noopener noreferrer"},l=(0,p.Uk)("連結串列"),u=(0,p.Uk)("或"),r={href:"https://zh.wikipedia.org/wiki/%E9%99%A3%E5%88%97",target:"_blank",rel:"noopener noreferrer"},i=(0,p.Uk)("陣列"),k=(0,p.Uk)("）上遍訪的"),b={href:"https://zh.wikipedia.org/wiki/%E5%AF%B9%E8%B1%A1_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)",target:"_blank",rel:"noopener noreferrer"},d=(0,p.Uk)("物件"),m=(0,p.Uk)("["),f={href:"https://zh.wikipedia.org/wiki/%E8%BF%AD%E4%BB%A3%E5%99%A8#cite_note-1",target:"_blank",rel:"noopener noreferrer"},g=(0,p.Uk)("1]"),v=(0,p.Uk)("["),w={href:"https://zh.wikipedia.org/wiki/%E8%BF%AD%E4%BB%A3%E5%99%A8#cite_note-definition-2",target:"_blank",rel:"noopener noreferrer"},h=(0,p.Uk)("2]"),y=(0,p.Uk)("["),x={href:"https://zh.wikipedia.org/wiki/%E8%BF%AD%E4%BB%A3%E5%99%A8#cite_note-3",target:"_blank",rel:"noopener noreferrer"},E=(0,p.Uk)("3]"),j=(0,p.Uk)("，設計人員使用此介面無需關心容器物件的記憶體分配的實現細節。其行為很像資料庫技術中的"),_={href:"https://zh.wikipedia.org/wiki/%E6%8C%87%E6%A8%99_(%E8%B3%87%E6%96%99%E5%BA%AB)",target:"_blank",rel:"noopener noreferrer"},A=(0,p.Uk)("游標"),U=(0,p.Uk)("（cursor），迭代器最早出現在1974年設計的"),B={href:"https://zh.wikipedia.org/wiki/CLU",target:"_blank",rel:"noopener noreferrer"},z=(0,p.Uk)("CLU"),I=(0,p.Uk)("程式語言中。"),W=(0,p.uE)('<p>簡言之，迭代器就是可以對某個數據結構進行遍歷的物件。</p><p>JavaScript 中，迭代器是一個具體的物件，這個物件需要符合符合迭代器協議（iterator protocal），迭代器協議定義了產生一系列值的標準方式。</p><p>編寫一個迭代器：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;dcd&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;jdjd&#39;</span><span class="token punctuation">]</span>\n\n<span class="token comment">// 創建一個迭代器來訪問 names</span>\n<span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token keyword">const</span> namesIterator <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> names<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> done<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> value<span class="token operator">:</span> names<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> <span class="token punctuation">{</span> done<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>namesIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>namesIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>namesIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>namesIterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><p>輸出：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>{ done: false, value: &#39;abc&#39; }\n{ done: false, value: &#39;dcd&#39; }\n{ done: false, value: &#39;jdjd&#39; }\n{ done: true, value: undefined }\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>也可以寫一隻自動生成迭代器的函數：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">createArrayIterator</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span>\n    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span> done<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> value<span class="token operator">:</span> arr<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n        <span class="token keyword">return</span> <span class="token punctuation">{</span> done<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="可迭代物件" tabindex="-1"><a class="header-anchor" href="#可迭代物件" aria-hidden="true">#</a> 可迭代物件</h2><p>可迭代物件是指一個物件實現了可迭代 （iterable protocal） 協議。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> iterableObj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  names<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cba&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;bba&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> index <span class="token operator">=</span> <span class="token number">0</span>\n    <span class="token keyword">return</span> <span class="token punctuation">{</span>\n      <span class="token function-variable function">next</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>names<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token punctuation">{</span> done<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>names<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token punctuation">{</span> done<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> value<span class="token operator">:</span> <span class="token keyword">undefined</span> <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>可以這樣使用：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> iterator <span class="token operator">=</span> iterableObj<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n\n<span class="token comment">// { done: false, value: &#39;abc&#39; }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// { done: false, value: &#39;cba&#39; }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// { done: false, value: &#39;bba&#39; }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// { done: true, value: undefined }</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>也可以使用 for...of 進行遍歷，本質上 for ... of 就是以上寫法的語法糖，當 done 成為 true 時就遍歷就會停止：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> item <span class="token keyword">of</span> iterableObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>所以的可迭代物件，都內置了這樣一個函數：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">const</span> names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;abc&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cvn&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;aaa&#39;</span><span class="token punctuation">]</span>\n<span class="token comment">// [Function: values]</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>Symbol<span class="token punctuation">.</span>iterator<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>',17),C={},F=(0,a(3744).Z)(C,[["render",function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[e,o,(0,p._)("a",c,[l,(0,p.Wm)(a)]),u,(0,p._)("a",r,[i,(0,p.Wm)(a)]),k,(0,p._)("a",b,[d,(0,p.Wm)(a)]),m,(0,p._)("a",f,[g,(0,p.Wm)(a)]),v,(0,p._)("a",w,[h,(0,p.Wm)(a)]),y,(0,p._)("a",x,[E,(0,p.Wm)(a)]),j,(0,p._)("a",_,[A,(0,p.Wm)(a)]),U,(0,p._)("a",B,[z,(0,p.Wm)(a)]),I]),W],64)}]])}}]);