"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[109],{8757:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-0f4e5884",path:"/front-end/javascript/13_strict-mode.html",title:"Strict Mode",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:3,title:"嚴格模式下常見的限制",slug:"嚴格模式下常見的限制",children:[]}],filePathRelative:"front-end/javascript/13_strict-mode.md",git:{updatedTime:1665400196e3,contributors:[{name:"louis61619",email:"louis61619@gmail.com",commits:1}]}}},915:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="strict-mode" tabindex="-1"><a class="header-anchor" href="#strict-mode" aria-hidden="true">#</a> Strict Mode</h1><p>在 ES5 中，JavaScript 提出了一個嚴格模式的概念：</p><p>嚴格模式是一種具有限制性的 JavaScript 模式，支持嚴格模式的瀏覽器在檢測到程式碼中有嚴格模式時，會以更加嚴格的方式進行檢測和執行。</p><p>通常會達到以下這些功能：</p><ul><li><p>通過拋出錯誤來消除一些原有的靜默 ( silent ) 錯誤。</p></li><li><p>JS 引擎可以在執行時做出更多的優化 (不需要對特殊的語法進行處理)。</p></li><li><p>禁用了一些 ECMAScript 可能會在未來版本中定義的一些語法錯誤。</p></li></ul><p>嚴格模式有兩種方式開啟——</p><p>在文件最上面的位置加上 use strict，而啟用的嚴格模式只會針對該文件：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token string">&#39;use strict&#39;</span>\n\nmessage <span class="token operator">=</span> <span class="token string">&#39;Hello World&#39;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>\n\n<span class="token boolean">true</span><span class="token punctuation">.</span>ooo <span class="token operator">=</span> <span class="token string">&#39;ijiji&#39;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>或者是在函數內部加上 use strict，嚴格模式就會只在該函數的作用域內執行：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;use strict&#39;</span>\n\n  <span class="token boolean">true</span><span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token string">&#39;123&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="嚴格模式下常見的限制" tabindex="-1"><a class="header-anchor" href="#嚴格模式下常見的限制" aria-hidden="true">#</a> 嚴格模式下常見的限制</h3><p>不允許以下這種方式創建全局變數：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  age <span class="token operator">=</span> <span class="token number">300</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>不允許函數有相同的參數名稱：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>對靜默錯誤進行報錯：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// 靜默錯誤</span>\n<span class="token boolean">true</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span>\nNanN <span class="token operator">=</span> <span class="token number">123</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>不允許八進制</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> num <span class="token operator">=</span> <span class="token number">0123</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>不允許使用 with 語句：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  message<span class="token operator">:</span> <span class="token string">&#39;Hello Obj&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">with</span> <span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>eval 函數不會向上引用變數：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">var</span> str <span class="token operator">=</span> <span class="token string">&#39;var message = &quot;Hello World&quot;; console.log(message);&#39;</span>\n\n<span class="token function">eval</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>嚴格模式下普通函數默認指向 undefined：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',25),e={},t=(0,a(3744).Z)(e,[["render",function(n,s){return p}]])}}]);