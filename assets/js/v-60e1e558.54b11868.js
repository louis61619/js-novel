"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[50],{457:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-60e1e558",path:"/front-end/javascript/4_call&apply&bind.html",title:"apply、call、bind",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"call 的實現",slug:"call-的實現",children:[{level:3,title:"自定義方法",slug:"自定義方法",children:[]},{level:3,title:"綁定 this",slug:"綁定-this",children:[]},{level:3,title:"邊緣情況(edge case)",slug:"邊緣情況-edge-case",children:[]},{level:3,title:"接收參數",slug:"接收參數",children:[]}]},{level:2,title:"apply 的實現",slug:"apply-的實現",children:[]},{level:2,title:"bind 的實現",slug:"bind-的實現",children:[]}],filePathRelative:"front-end/javascript/4_call&apply&bind.md",git:{updatedTime:1665400196e3,contributors:[{name:"louis61619",email:"louis61619@gmail.com",commits:1}]}}},6010:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="apply、call、bind" tabindex="-1"><a class="header-anchor" href="#apply、call、bind" aria-hidden="true">#</a> apply、call、bind</h1><p>練習實現 apply、call、bind，並更深刻的了解 this 和在函數中的調用關係。</p><h2 id="call-的實現" tabindex="-1"><a class="header-anchor" href="#call-的實現" aria-hidden="true">#</a> call 的實現</h2><h3 id="自定義方法" tabindex="-1"><a class="header-anchor" href="#自定義方法" aria-hidden="true">#</a> 自定義方法</h3><p>首先使用 prototype 為函數添加一個名為 mycall 的自定義方法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">mycall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;mycall&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>以上這段程式碼能夠讓我們能夠透過 mycall 這個方法模擬原生的 call 方法，接下來我們只要需要在 mycall 方法中獲取需要被執行的函數。</p><h3 id="綁定-this" tabindex="-1"><a class="header-anchor" href="#綁定-this" aria-hidden="true">#</a> 綁定 this</h3><p>透過 this 能夠獲取到需要被執行的函數，具體可以參考 <a href="">JavaScript 中的 this</a> 這篇。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">mycall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>接下來就要進行 this 的綁定，參數 thisArg 就代表著要綁定的物件，透過在物件中作用為方法調用可以對函數的 this 進行綁定。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">mycall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>\n  thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn\n  thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>簡單寫一個範例：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">mycall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>\n  thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn\n  thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo函數被執行了&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nfoo<span class="token punctuation">.</span><span class="token function">mycall</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;louis&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>console.log 輸出結果為：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>foo函數被執行了 {name: &#39;louis&#39;, fn: ƒ}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>可以看到 foo 函數中的 this 被指向了對應的物件，物件內部多出了一個 fn 函數是綁定物件調用的結果，這是在 JavaScript 中模擬 call 的副作用，原生的 call 使用 C++進行編寫，就不會出現這個屬性，當然最後也是可以使用 delete 將該 fn 屬性進行刪除，但是打印 this 的時候依然會出現，所以就先不刪了。</p><h3 id="邊緣情況-edge-case" tabindex="-1"><a class="header-anchor" href="#邊緣情況-edge-case" aria-hidden="true">#</a> 邊緣情況(edge case)</h3><p>接下來我們在對這個函數進行ㄧ些改進，由於使用 thisArg.fn 去綁定函數的關係，所以當傳入的 thisArg 不為物件時就會出錯。</p><p>可以透過 Object 這個函數將 string、number 等類型轉化為物件形式：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">mycall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>\n  <span class="token comment">// 防止傳入的參數不為物件</span>\n  thisArg <span class="token operator">=</span> <span class="token function">Object</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">)</span>\n  thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn\n  thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>這樣就可以傳入字符串：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo函數被執行了&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nfoo<span class="token punctuation">.</span><span class="token function">mycall</span><span class="token punctuation">(</span><span class="token string">&#39;louis&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>輸出：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>foo函數被執行了 String {&#39;louis&#39;, fn: ƒ}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>還有一個邊緣情況(edge case)可以進行修正，原生的 call 在傳入 null 或是 undefined 作為參數時，綁定的 this 會是 window。</p><p>可以透過簡單的運算子來實現：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">mycall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thisArg</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>\n  <span class="token comment">// 假如傳入null或是undefined要綁定window</span>\n  thisArg <span class="token operator">=</span> <span class="token punctuation">(</span>thisArg <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> thisArg <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Object</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> window\n  thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn\n  thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo函數被執行了&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\nfoo<span class="token punctuation">.</span><span class="token function">mycall</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>輸出：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>foo函數被執行了 Window {window: Window, self: …}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h3 id="接收參數" tabindex="-1"><a class="header-anchor" href="#接收參數" aria-hidden="true">#</a> 接收參數</h3><p>要實現接收參數，可以直接使用 es6 的語法接收所有剩餘參數，並且將函數處理後的結果進行返回，以下為最終的例子：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">mycall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>\n  thisArg <span class="token operator">=</span> <span class="token punctuation">(</span>thisArg <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> thisArg <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Object</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> window\n  thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn\n  <span class="token comment">// 接收參數並返回結果</span>\n  <span class="token keyword">return</span> thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> result <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">mycall</span><span class="token punctuation">(</span><span class="token string">&#39;louis&#39;</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>輸出為：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>50\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="apply-的實現" tabindex="-1"><a class="header-anchor" href="#apply-的實現" aria-hidden="true">#</a> apply 的實現</h2><p>apply 和 call 的實現方式幾乎相同，差別只在於傳入參數的形式，apply 是以陣列的形式將參數傳入：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token function">foo</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">[</span>arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> arg3<span class="token punctuation">]</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>所以要修改的地方就只有參數的接收，並且對不傳入參數進行處理：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// argArray做為參數不用以剩餘參數的形式接收</span>\n<span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">mycall</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span> argArray</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>\n  thisArg <span class="token operator">=</span> <span class="token punctuation">(</span>thisArg <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> thisArg <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Object</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> window\n  thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn\n  <span class="token comment">// 對不傳入參數進行處理</span>\n  argArray <span class="token operator">=</span> <span class="token punctuation">(</span>argArray <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> argArray <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> argArray<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">return</span> thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>argArray<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">n1<span class="token punctuation">,</span> n2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;foo函數執行&#39;</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span>\n  <span class="token keyword">return</span> n1 <span class="token operator">+</span> n2\n<span class="token punctuation">}</span>\n<span class="token keyword">var</span> result <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">myapply</span><span class="token punctuation">(</span><span class="token string">&#39;louis&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>輸出的結果為：</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>foo函數執行 String {&#39;louis&#39;, fn: ƒ}\n50\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="bind-的實現" tabindex="-1"><a class="header-anchor" href="#bind-的實現" aria-hidden="true">#</a> bind 的實現</h2><p>bind 和 call、apply 最大的差別是會返回一個函數，這個返回的函數會綁定傳入的物件作為 this。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">mybind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span> <span class="token operator">...</span>argArray</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>\n  thisArg <span class="token operator">=</span> <span class="token punctuation">(</span>thisArg <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> thisArg <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Object</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> window\n\n  <span class="token comment">// bind和call、apply最大的差別是要返回一個函數</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><p>接下來可只要把在 call、apply 中進行綁定 this 操作在返回的函數中實現即可，同時也要注意返回的函數也能夠進行參數的傳遞。</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">mybind</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">thisArg<span class="token punctuation">,</span> <span class="token operator">...</span>argArray</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">this</span>\n  thisArg <span class="token operator">=</span> <span class="token punctuation">(</span>thisArg <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> thisArg <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">&amp;&amp;</span> <span class="token function">Object</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> window\n\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 在返回的函數中進行this綁定</span>\n    thisArg<span class="token punctuation">.</span>fn <span class="token operator">=</span> fn\n    <span class="token comment">// 將新函數的參數一起傳入要調用的函數中</span>\n    <span class="token keyword">return</span> thisArg<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span>argArray<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>',50),t={},e=(0,a(3744).Z)(t,[["render",function(n,s){return p}]])}}]);